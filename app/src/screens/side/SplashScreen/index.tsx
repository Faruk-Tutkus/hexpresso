import { db } from "@api/config.firebase";
import { Animation } from "@components";
import { useFetchData, useFetchSeers } from "@hooks";
import { useAuth, useTheme } from "@providers";
import { useRouter } from "expo-router";
import { doc, getDoc } from "firebase/firestore";
import { useEffect, useState } from "react";
import { Text, View } from "react-native";
import styles from "./styles";

const SplashScreen = () => {
  const router = useRouter()
  const { theme, colors } = useTheme()
  const { user, loading: authLoading } = useAuth()
  const [texts] = useState([
    "ƒ∞√ßindeki g√ºc√º ke≈üfet, bug√ºn her ≈üeye yetersin!",
    "Harika bir g√ºn seni bekliyor, mucizelere a√ßƒ±k ol!",
    "Kalbinin sesini dinle, doƒüru yol orada!",
    "Yƒ±ldƒ±zlar senin i√ßin hizalanƒ±yor, dileklerini dile getir!",
    "Her adƒ±mƒ±n seni ba≈üarƒ±ya bir adƒ±m daha yakla≈ütƒ±rƒ±yor!",
    "Bug√ºn evrenin sana s√ºrprizleri var, g√ºl√ºmse!",
    "G√∂zlerini kapat ve hayallerini ger√ßeƒüe d√∂n√º≈üt√ºr!",
    "Potansiyelin sƒ±nƒ±rsƒ±z, bug√ºn yeni bir ba≈ülangƒ±√ß yap!",
    "Geleceƒüin parlƒ±yor, ƒ±≈üƒ±ƒüƒ±nƒ± sa√ßmaya devam et!",
    "Aradƒ±ƒüƒ±n cevaplar i√ßinde, sadece inan!",
    "≈ûans seninle, cesur adƒ±mlar at!",
    "Bug√ºn enerjin harika, etrafƒ±na ne≈üe sa√ß!",
    "Her biti≈ü yeni bir ba≈ülangƒ±√ßtƒ±r, ileriye bak!",
    "Mutluluk sana doƒüru geliyor, kalbini a√ßƒ±k tut!",
    "Ge√ßmi≈ü tecr√ºbelerin seni g√º√ßlendirdi, unutma!",
    "Yarƒ±n i√ßin heyecanlan, yeni zaferler seni bekliyor!",
 ])

  const [randomText, setRandomText] = useState('');

  useEffect(() => {
    const index = Math.floor(Math.random() * texts.length);
    setRandomText(texts[index]);
  }, []);

  // Yeni hook yapƒ±sƒ± - FetchSeers ile aynƒ±
  const { signs, loading: dataLoading, error } = useFetchData(user);
  const { seers, loading: seersLoading, error: seersError } = useFetchSeers(user);

  // Auth ve data durumuna g√∂re y√∂nlendirme
  useEffect(() => {
    const checkAndNavigate = async () => {
      // Auth loading'i bekle
      if (authLoading) {
        console.log('üîÑ SplashScreen: Auth loading, bekleniyor...');
        return;
      }

      // User yoksa direkt StartScreen'e git
      if (!user) {
        console.log('üë§ SplashScreen: User yok, StartScreen\'e y√∂nlendiriliyor');
        setTimeout(() => {
          router.replace("/src/screens/side/StartScreen");
        }, 3000);
        return;
      }

      // User varsa √∂nce newUser kontrol√º yap
      try {
        const userRef = doc(db, "users", user.uid);
        const docRef = await getDoc(userRef);
        
        if (docRef.data()?.newUser) {
          console.log('üë§ SplashScreen: Yeni kullanƒ±cƒ±, StartScreen\'e y√∂nlendiriliyor');
          setTimeout(() => {
            router.replace("/src/screens/side/StartScreen");
          }, 3000);
          return;
        }
      } catch (error) {
        console.error('‚ùå SplashScreen: User dok√ºmanƒ± kontrol hatasƒ±:', error);
        // Hata durumunda StartScreen'e y√∂nlendir
        setTimeout(() => {
          router.replace("/src/screens/side/StartScreen");
        }, 3000);
        return;
      }

      // User var ve newUser deƒüil - data y√ºklenmesini bekle
      if (!dataLoading && !seersLoading) {
        const userRef = doc(db, "users", user.uid);
        const docRef = await getDoc(userRef);
        if (signs && signs.length > 0 && seers && seers.length > 0 && !docRef.data()?.newUser && docRef.exists() && user.emailVerified) {
          console.log('‚úÖ SplashScreen: Veri y√ºklendi, ana ekrana y√∂nlendiriliyor');
          router.replace('/src/screens/main/navigator/FortuneTellingScreen');
        } else if (error || seersError || docRef.data()?.newUser || !user.emailVerified) {
          console.log('‚ö†Ô∏è SplashScreen: Veri y√ºklenemedi, Introduction\'a y√∂nlendiriliyor');
          router.replace('/src/screens/side/Introduction');
        }
        else if (!docRef.exists()) {
          console.log('‚ö†Ô∏è SplashScreen: User dok√ºmanƒ± bulunamadƒ±, StartScreen\'e y√∂nlendiriliyor');
          router.replace('/src/screens/side/StartScreen');
        }
      }
    };
    
    checkAndNavigate();
  }, [user, authLoading, dataLoading, signs, error, router]);

  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
      <Animation
        src={theme === 'dark' ?
          "https://lottie.host/c94da6c6-be00-4b27-a410-c168024457e2/vfhKoIwBCz.lottie" :
          "https://lottie.host/be109cbf-2c26-4b68-a18d-d1526e22752c/NIPHAUmyob.lottie"}
        contentStyle={styles.loading}
      />
      <Text style={[styles.text, { color: colors.text }]}>
        {randomText}
      </Text>
    </View>
  )
}
export default SplashScreen