import { db } from "@api/config.firebase";
import { Animation } from "@components";
import { useFetchData, useFetchSeers } from "@hooks";
import { useAuth, useTheme } from "@providers";
import { useRouter } from "expo-router";
import { doc, getDoc } from "firebase/firestore";
import { useEffect, useState } from "react";
import { Text, View } from "react-native";
import styles from "./styles";

const SplashScreen = () => {
  const router = useRouter()
  const { theme, colors } = useTheme()
  const { user, loading: authLoading } = useAuth()
  const [texts] = useState([
    "Sana bir sƒ±r fƒ±sƒ±ldayacaƒüƒ±m, hazƒ±r ol...",
    "Bug√ºn kaderini deƒüi≈ütirecek bir ≈üey olacak...",
    "Bo≈üuna bekleme, mesaj gelmeyecek...",
    "Yƒ±ldƒ±zlar kulaƒüƒ±ma senin adƒ±nƒ± fƒ±sƒ±ldadƒ±...",
    "Fal fincanƒ±n sana konu≈ümak istiyor...",
    "Bug√ºn evrende senin adƒ±na bir kƒ±pƒ±rtƒ± var...",
    "G√∂zlerini kapat... Dileƒüini tuttun mu?",
    "Kahvenin dibinde bir sƒ±r saklƒ±...",
    "Geleceƒüin g√∂lgeleri ≈üekillenmeye ba≈üladƒ±...",
    "Kalbinin cevabƒ±nƒ± bulmaya √ßok yakƒ±nsƒ±n...",
    "Yƒ±ldƒ±zlar seninle dalga ge√ßmiyor bu kez...",
    "Bug√ºn enerjin bamba≈üka, fark ettin mi?",
    "O ki≈üi sana g√∂re deƒüildi zaten, takƒ±lma...",
    "Mutsuzluƒüunun sebebi sana doƒüru gelmekte...",
    "Ge√ßen yƒ±l bug√ºn ne oldu hatƒ±rlƒ±yor musun?",
    "Yarƒ±n i√ßin heyecanlƒ± mƒ±sƒ±n?",
  ])

  const [randomText, setRandomText] = useState('');

  useEffect(() => {
    const index = Math.floor(Math.random() * texts.length);
    setRandomText(texts[index]);
  }, []);

  // Yeni hook yapƒ±sƒ± - FetchSeers ile aynƒ±
  const { signs, loading: dataLoading, error } = useFetchData(user);
  const { seers, loading: seersLoading, error: seersError } = useFetchSeers(user);

  // Auth ve data durumuna g√∂re y√∂nlendirme
  useEffect(() => {
    const checkAndNavigate = async () => {
      // Auth loading'i bekle
      if (authLoading) {
        console.log('üîÑ SplashScreen: Auth loading, bekleniyor...');
        return;
      }

      // User yoksa direkt StartScreen'e git
      if (!user) {
        console.log('üë§ SplashScreen: User yok, StartScreen\'e y√∂nlendiriliyor');
        setTimeout(() => {
          router.replace("/src/screens/side/StartScreen");
        }, 3000);
        return;
      }

      // User varsa √∂nce newUser kontrol√º yap
      try {
        const userRef = doc(db, "users", user.uid);
        const docRef = await getDoc(userRef);
        
        if (docRef.data()?.newUser) {
          console.log('üë§ SplashScreen: Yeni kullanƒ±cƒ±, StartScreen\'e y√∂nlendiriliyor');
          setTimeout(() => {
            router.replace("/src/screens/side/StartScreen");
          }, 3000);
          return;
        }
      } catch (error) {
        console.error('‚ùå SplashScreen: User dok√ºmanƒ± kontrol hatasƒ±:', error);
        // Hata durumunda StartScreen'e y√∂nlendir
        setTimeout(() => {
          router.replace("/src/screens/side/StartScreen");
        }, 3000);
        return;
      }

      // User var ve newUser deƒüil - data y√ºklenmesini bekle
      if (!dataLoading && !seersLoading) {
        if (signs && signs.length > 0 && seers && seers.length > 0) {
          console.log('‚úÖ SplashScreen: Veri y√ºklendi, ana ekrana y√∂nlendiriliyor');
          router.replace('/src/screens/main/navigator/FortuneTellingScreen');
        } else if (error) {
          console.log('‚ö†Ô∏è SplashScreen: Veri y√ºklenemedi, Introduction\'a y√∂nlendiriliyor');
          router.replace('/src/screens/side/Introduction');
        }
      }
    };
    
    checkAndNavigate();
  }, [user, authLoading, dataLoading, signs, error, router]);

  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
      <Animation
        src={theme === 'dark' ?
          "https://lottie.host/c94da6c6-be00-4b27-a410-c168024457e2/vfhKoIwBCz.lottie" :
          "https://lottie.host/be109cbf-2c26-4b68-a18d-d1526e22752c/NIPHAUmyob.lottie"}
        contentStyle={styles.loading}
      />
      <Text style={[styles.text, { color: colors.text }]}>
        {randomText}
      </Text>
    </View>
  )
}
export default SplashScreen