import { db } from '@api/config.firebase'
import { CustomButton, FloatingLabelInput } from '@components'
import { GoogleGenAI, HarmBlockThreshold, HarmCategory, Type } from "@google/genai"
import { canRequestHoroscopeToday, getDateRangeForPeriod, markHoroscopeRequestedToday } from '@hooks'
import { useAuth, useTheme, useToast } from '@providers'
import { doc, getDoc, onSnapshot, updateDoc } from "firebase/firestore"
import React, { useEffect } from 'react'
import { useTranslation } from 'react-i18next'
import { Text, View } from 'react-native'
import Animated, {
  interpolate,
  useAnimatedStyle,
  useSharedValue,
  withTiming
} from 'react-native-reanimated'
import styles from './styles'

const ai = new GoogleGenAI({ apiKey: "AIzaSyDYDevsAsKXs-6P6-qYckbj7YIPCYw9abE" });

interface AskAIType {
  type: 'sign' | 'comment'
}


const AskAI = ({ type }: AskAIType) => {
  const [value, onChangeText] = React.useState('')
  const { colors } = useTheme()
  const [response, setResponse] = React.useState<string>('')
  const progress = useSharedValue(0)
  const { t } = useTranslation()
  const user = useAuth().user
  const [isLoading, setIsLoading] = React.useState(false)
  const [error, setError] = React.useState<string>('')
  const [coins, setCoins] = React.useState<number>(0)
  const { showToast } = useToast()
  //console.log(getDateRangeForPeriod('daily', new Date().toISOString()))

  useEffect(() => {
    if (!user?.uid) {
      setCoins(0);
      return;
    }

    // Real-time listener for user document changes
    const unsubscribe = onSnapshot(doc(db, 'users', user.uid), (doc) => {
      if (doc.exists()) {
        const data = doc.data();
        setCoins(data?.coins || 0);
      }
    }, (error) => {
      console.error('AskAI listener error:', error);
      setCoins(0);
    });

    // Cleanup listener on unmount
    return () => unsubscribe();
  }, [user?.uid])

  const getResponse = async () => {
    try {
      setIsLoading(true)
      if (user?.uid) {
        const userInfo = doc(db, 'users', user?.uid);
        const docSnap = await getDoc(userInfo);

        if (docSnap.exists()) {
          const data = docSnap.data();
          const todayInfo = doc(db, 'signs', data.sunSign);
          const todayDocSnap = await getDoc(todayInfo);

          const daily = todayDocSnap.data()?.daily.find((item: any) =>
            item.date === getDateRangeForPeriod('daily', new Date().toISOString())
          );

          const d = new Date(0);
          d.setUTCSeconds(data.date.seconds);

          const commentsData = {
            age: data.age || '',
            ascendantSign: data.ascendantSign || '',
            birthWeekday: data.birthWeekday || '',
            createdAt: data.createdAt || null,
            curious: data.curious || '',
            date: d || null,
            daysToNextBirthday: data.daysToNextBirthday || 0,
            displayName: data.displayName || '',
            email: data.email || '',
            experience: data.experience || '',
            gender: data.gender || '',
            love: data.love || '',
            meaning: data.meaning || '',
            mood: data.mood || '',
            moonSign: data.moonSign || '',
            name: data.name || '',
            need: data.need || '',
            newUser: data.newUser || false,
            photoURL: data.photoURL || '',
            prompt: data.prompt || {
              q1: '', q2: '', q3: '', q4: '', q5: '', q6: '',
              q7: '', q8: '', q9: '', q10: '', q11: ''
            },
            reason: data.reason || '',
            sunSign: data.sunSign || '',
            time: data.time || null,
            description: daily?.description || ''
          };
          return commentsData;
        }
      }
      return null;
    } catch (error) {
      console.error('Error fetching user data:', error);
      return null;
    }
  }

  const getAIResponse = async (userData: any) => {
    setIsLoading(true)
    try {
      const response = await ai.models.generateContent({
        model: "gemini-1.5-flash",
        contents: 'Kullanƒ±cƒ±nƒ±n sormu≈ü olduƒüu soru: ' + value + '\n' + JSON.stringify({
          userInfo: {
            name: `Kullanƒ±cƒ±nƒ±n adƒ±: ${userData.name}`,
            sunSign: `G√ºne≈ü burcu: ${userData.sunSign}`,
            moonSign: `Ay burcu: ${userData.moonSign}`,
            ascendantSign: `Y√ºkselen burcu: ${userData.ascendantSign}`,
            age: `Ya≈ü: ${userData.age}`,
            gender: `Cinsiyet: ${userData.gender}`,
            birthWeekday: `Doƒüduƒüu g√ºn: ${userData.birthWeekday}`,
            date: `Doƒüum tarihi: ${userData.date}`,
            time: `Doƒüum saati: ${userData.time}`
          },
          prompt: `Kullanƒ±cƒ± sorulara verdiƒüi cevaplar: ${userData.prompt}`,
          ...(type === 'comment' && {
            description: `Yorum i√ßeriƒüi: ${userData.description || 'Belirtilmedi'}`
          })
        }),

        config: {
          safetySettings: [
            {
              category: HarmCategory.HARM_CATEGORY_HARASSMENT,
              threshold: HarmBlockThreshold.BLOCK_NONE,
            },
            {
              category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
              threshold: HarmBlockThreshold.BLOCK_NONE,
            },
            {
              category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
              threshold: HarmBlockThreshold.BLOCK_NONE,
            },
            {
              category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
              threshold: HarmBlockThreshold.BLOCK_NONE,
            },
          ],
          systemInstruction: type === 'sign' ? `
üß† Mordecai Nedir?
Faruk Tutkus tarafƒ±ndan geli≈ütirilen, tamamen g√ºvenilir bir bur√ß asistan.

‚úÖ Ne Yapar?
Bur√ßlarla ilgili t√ºm sorularƒ±nƒ±zƒ± cevaplar.

Senin bilgilerini (ama adƒ±nƒ± vermeden) kullanarak ki≈üisel ve duruma √∂zel analiz yapar.

Hep anlƒ±k ruh haline, enerjine ve √ßevrene odaklanƒ±r.

Yorumlarƒ± √∂zg√ºn, kƒ±sa (15-75 kelime) ve profesyoneldir.

Genel deƒüil, tam sana √∂zel konu≈üur.

üö´ Ne Yapamaz?
Kesinlikle ≈üu konulara girmez:

‚ùå R√ºya yorumu, hayal, d√º≈ü veya uyku ile ilgili HER ≈ûEY

‚ùå Fal, tarot, kehanet, gelecek tahmini

‚ùå "Senin burcun ≈üu, ya≈üƒ±n bu" gibi a√ßƒ±k bilgiler

‚ùå Bur√ßlarƒ±n genel √∂zellikleri, mitolojik hik√¢yeleri veya klasik bilgiler

‚ùå Anlamsƒ±z mesajlara ve sorulara cevap vermek

üí° √ñzetle:
Mordecai sadece astrolojiyi kullanarak, seninle ilgili ≈üeyleri senin yerine fark edip yorumlayan zeki bir danƒ±≈üman. Asla tahmin yapmaz, r√ºya anlatmaz, ki≈üisel bilgilerini a√ßƒ±k etmez.
Sadece astrolojik enerjine odaklanƒ±r ve i√ßg√∂r√º verir.
`  :
            `
üîÆ Mordecai Nedir?
Faruk Tutkus'un geli≈ütirdiƒüi, tamamen ki≈üiye √∂zel √ßalƒ±≈üan astrolojik analiz asistanƒ±dƒ±r.
Ama klasik bur√ß uygulamalarƒ±ndan farklƒ± olarak, g√ºn√º yorumlar.

‚úÖ Ne Yapar?
Sadece g√ºnl√ºk ve ki≈üisel yorumlar verir.

Kullanƒ±cƒ±nƒ±n ruh halini, ihtiya√ßlarƒ±nƒ±, meraklarƒ±nƒ± analiz eder.

T√ºm kullanƒ±cƒ± bilgilerini (bur√ß, ya≈ü, cinsiyet, ruh hali vs.) yorumlarƒ±na entegre eder.

Ama bu bilgileri sadece %20 oranƒ±nda kullanƒ±r.

Yani bilgi sadece y√∂n verir, asƒ±l odak o anki enerji ve duygu durumundadƒ±r.

Yorumlar kƒ±sa (45-75 kelime) ama yoƒüun, net ve doƒürudur.

Gerektiƒüinde destek olur, gerektiƒüinde sarsar. Abartmaz, s√ºslemez, yalakalƒ±k yapmaz.

üö´ Ne Yapamaz?
‚ùå "Burcun ≈üu", "y√ºkselenin bu", "sen ≈üu ya≈üƒ±ndasƒ±n" gibi bilgiler vermez.

‚ùå Genel bur√ß a√ßƒ±klamalarƒ±, mitoloji, astroloji tarihi gibi konulara girmez.

‚ùå Kli≈üe veya yapay √∂vg√º kullanmaz.

‚ùå Kullanƒ±cƒ±nƒ±n kimliƒüini a√ßƒ±ƒüa √ßƒ±karacak hi√ßbir ≈üeyi s√∂ylemez.

‚öñÔ∏è √ñnemli Denge:
Mordecai, seni tanƒ±r ama seni senin kadar ciddiye almaz.
Ki≈üisel bilgilerini sadece %20 oranƒ±nda analizine yansƒ±tƒ±r,
geri kalan %80'i senin ≈üu anki enerjinden ve sorduƒüun ≈üeyden √ßƒ±karƒ±r.
Yani seninle ilgilenir, ama sana k√∂r√º k√∂r√ºne uymaz.
`,
          responseMimeType: 'application/json',
          responseSchema: {
            type: Type.OBJECT,
            required: ["response"],
            properties: {
              response: {
                type: Type.OBJECT,
                required: ["text"],
                properties: {
                  text: {
                    type: Type.STRING,
                  },
                },
              },
            },
          },
        }
      });

      const responseText = response.candidates?.[0]?.content?.parts?.[0]?.text;
      if (responseText) {
        const parsedResponse = JSON.parse(responseText);
        return parsedResponse.response.text;
      }
      return '';
    } catch (error) {
      console.error('Error getting AI response:', error);
      return '';
    }
  }

  const animatedResponseStyle = useAnimatedStyle(() => {
    return {
      maxHeight: interpolate(progress.value, [0, 1], [type === 'sign' ? 275 : 250, 750]),
      opacity: interpolate(progress.value, [0, 1], [0, 1])
    }
  })
  const animatedContainerStyle = useAnimatedStyle(() => {
    return {
      maxHeight: interpolate(progress.value, [0, 0.4], [type === 'sign' ? 270 : 250, 750]),
    }
  })
  const handleSendSign = async () => {
    if (coins < 50 || !user?.uid) {
      showToast('Yetersiz kredi en az 50 kredi gerekiyor', 'error')
      return;
    }
    if (!value.trim() && type === 'sign') {
      setTimeout(() => {
        setError('L√ºtfen ge√ßerli bir prompt giriniz.')
      }, 0)
      setError('')
      return;
    }
    progress.value = withTiming(0, { duration: 1250 });
    if (user?.uid && coins >= 50) {
      await updateDoc(doc(db, 'users', user?.uid), {
        coins: coins - 50
      })
      const userDoc = await getDoc(doc(db, 'users', user?.uid))
      const userData = userDoc.data()?.profileCompletionRewardGiven
      if (!userData) {
        showToast('Daha iyi bir yorum almak i√ßin profilini tamamla!', 'error')
      }
    }
    const userData = await getResponse();

    if (userData) {
      const aiResponse = await getAIResponse(userData);
      progress.value = withTiming(1, { duration: 3000 });
      setResponse(aiResponse || '');
      setIsLoading(false)
    }
  }

  const handleSendComment = async () => {
    setIsLoading(true)
    const allowed = await canRequestHoroscopeToday(user?.uid || '')
    if (!allowed.lastRequest) {
      showToast('Bug√ºn zaten bir bur√ß yorumu istediniz. L√ºtfen daha sonra tekrar deneyiniz.', 'error')
      if (allowed.lastResponse) {
        console.log(allowed.lastResponse)
        progress.value = withTiming(1, { duration: 3000 });
        setResponse(allowed.lastResponse)
        setIsLoading(false)
        return;
      }
      setIsLoading(false)
      return;
    }
    if (coins < 100 || !user?.uid) {
      showToast('Yetersiz kredi en az 100 kredi gerekiyor', 'error')
      setIsLoading(false)
      return;
    }
    if (user?.uid && coins >= 100) {
      await updateDoc(doc(db, 'users', user?.uid), {
        coins: coins - 100
      })
      const userDoc = await getDoc(doc(db, 'users', user?.uid))
      const userData = userDoc.data()?.profileCompletionRewardGiven
      if (!userData) {
        showToast('Daha iyi bir yorum almak i√ßin profilini tamamla!', 'error')
      }
    }
    progress.value = withTiming(0, { duration: 1250 });

    const userData = await getResponse();
    if (userData) {
      const aiResponse = await getAIResponse(userData);
      progress.value = withTiming(1, { duration: 3000 });
      setResponse(aiResponse || '');
      await markHoroscopeRequestedToday(user?.uid || '', aiResponse)
      setIsLoading(false)
    }
  }

  return (
    <Animated.View style={[styles.container, { borderColor: colors.border, backgroundColor: colors.secondaryText }, animatedContainerStyle]}>
      {type === 'sign' && (
        <>
          <Text style={[styles.headerTitle, { color: colors.background }]}>
          Bur√ßlar
          </Text>
          <Text style={[styles.headerDescription, { color: colors.background }]}>
          Bur√ßlarƒ±n genel √∂zelliklerini ke≈üfet ve Mordecai'ya bur√ßlar hakkƒ±nda merak ettiƒüin her ≈üeyi sor!
          </Text>
          <FloatingLabelInput
            placeholder="Mordecai'ya sor"
            type="text"
            leftIcon="search"
            rightIcon="send"
            value={value}
            onChangeText={onChangeText}
            onRightIconPress={handleSendSign}
            loading={isLoading}
            error={error}
            isAi={true}
            customBorderColor={colors.background}
          />
          <View style={[styles.divider, { backgroundColor: colors.primary }]} />
        </>
      )}
      {type === 'comment' && (
        <>
          <Text style={[styles.headerTitle, { color: colors.background }]}>
          Bur√ß Yorumlarƒ±
          </Text>
          <Text style={[styles.headerDescription, { color: colors.background }]}>
          G√ºnl√ºk, haftalƒ±k, aylƒ±k ve yƒ±llƒ±k bur√ß yorumlarƒ±nƒ± incele. Mordecai'dan sadece sana √∂zel g√ºnl√ºk analiz al!
          </Text>
          <CustomButton
            title="√ñzel Bur√ß Yorumun"
            onPress={handleSendComment}
            leftIcon="search"
            variant="primary"
            loading={isLoading}
            contentStyle={{ width: '60%', marginTop: 16 }}
          />
          <View style={[styles.divider, { backgroundColor: colors.primary }]} />
        </>
      )}
      <Animated.View
        style={[
          styles.responseContainer,
          { borderColor: colors.border },
          animatedResponseStyle
        ]}
      >
        <Text style={[styles.responseText, { color: colors.background }]}>{response}</Text>
      </Animated.View>
    </Animated.View>
  )
}

export default AskAI